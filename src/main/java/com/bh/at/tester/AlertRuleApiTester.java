/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2023.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

/* ** ** ** ** ** * AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! * ** ** ** ** ** */

package com.bh.at.tester;

import static com.bh.at.apiutil.CyAPIUtilFactory.apif;
import static com.bh.at.main.AppConfig.*;

import com.bh.at.iapiutil.IAPIHelper;

import java.util.*;
import java.util.function.Consumer;

import org.junit.Assert;

public final class AlertRuleApiTester {
  public static Consumer<String> testRunnerLogger;
  private IAPIHelper alert_rule_apiApiHelper;
  private final Map<String, Object> metaInfo = new HashMap<>();
  private final Map<String, IAPIHelper> apiHelpers = new HashMap<>();
  private String lastApiFileUsed;
  public AlertRuleApiTester() {
  }

  /**
   * the api file create_alert_rule.alert_rule_api:apiJSON.
   *
   * @param apiFile The file, which contains the api definitions.
   */
  public void initAlert_rule_apiApi(String apiFile) {
    alert_rule_apiApiHelper = getApiHelper(apiPaths, apiFile);
    log2TestRunner("\n>>>>> alert_rule_api : Function initAlert_rule_apiApi (the api file create_alert_rule.alert_rule_api:apiJSON) not fully implemented.");
  }

  /**
   * the user calls post:alert_rule_api:apiCALL.
   *
   * @param apiCall The REST api call that is to be invoked.
   */
  public void callPostAlert_rule_apiApi(String apiCall) {
    metaInfo.clear();
    metaInfo.put("cyborg:reqName", apiCall);
    metaInfo.put("jsonp:1:add:/request/body/name", UUID.randomUUID().toString());
    System.out.println(alert_rule_apiApiHelper.getApiJsono(metaInfo));
    Assert.assertTrue(metaInfo.get("cyborg:reqName") + " from file " + lastApiFileUsed + " failed.", alert_rule_apiApiHelper.callAPI(metaInfo));

  }

  /**
   * alert should be created with response status code 201 and alert Id.
   *
   * @param p0
   */
  public void alert_rule_api_f1(Integer p0) {
    System.out.println( alert_rule_apiApiHelper.getActRespBody());
    Assert.assertEquals("201",alert_rule_apiApiHelper.getActRespCode());
  }
  public void alert_rule_api_f2(Integer p0) {
    metaInfo.put("jsonp:1:add:/request/headers/tenant", "");
    metaInfo.put("jsonp:1:add:/response/statusCode", "400");
    System.out.println(alert_rule_apiApiHelper.getApiJsono(metaInfo));
    Assert.assertTrue(metaInfo.get("cyborg:reqName") + " from file " + lastApiFileUsed + " failed.", alert_rule_apiApiHelper.callAPI(metaInfo));
    log2TestRunner("\n>>>>> alert_rule_api : Function callPostAlert_rule_apiApi (the user calls post:alert_rule_api:apiCALL) not fully implemented.");
    System.out.println( alert_rule_apiApiHelper.getActRespBody());
    Assert.assertEquals("400",alert_rule_apiApiHelper.getActRespCode());
    Assert.assertEquals("Required fields { Tenant } missing",alert_rule_apiApiHelper.getActRespBody().getJSONO("jsonObj").get("description"));

  }

  public void alert_rule_api_f3(Integer p0) {
    metaInfo.put("jsonp:1:add:/request/body/name", "");
    metaInfo.put("jsonp:1:add:/response/statusCode", "400");
    System.out.println(alert_rule_apiApiHelper.getApiJsono(metaInfo));
    Assert.assertTrue(metaInfo.get("cyborg:reqName") + " from file " + lastApiFileUsed + " failed.", alert_rule_apiApiHelper.callAPI(metaInfo));
    log2TestRunner("\n>>>>> alert_rule_api : Function callPostAlert_rule_apiApi (the user calls post:alert_rule_api:apiCALL) not fully implemented.");
    System.out.println( alert_rule_apiApiHelper.getActRespBody());
    Assert.assertEquals("400",alert_rule_apiApiHelper.getActRespCode());
    Assert.assertEquals("Required fields { name } missing",alert_rule_apiApiHelper.getActRespBody().getJSONO("jsonObj").get("description"));

  }

  /**
   * Locate the api file from the list of folders specified by apiPaths
   * and associate it with the apiHelper object.
   * The lastApiFileUsed used is used to track the last api file referenced, this is useful
   * when the api call and api file are not a part of the same step definition.
   *
   * @param   apiFilePaths  The json array specifying the locations in order, where the apiFile can be found.
   * @param   apiFile   The apiFile that is associated with the apiHelper object.
   * @return apiHelper The object associated with the api file.
   */
  private IAPIHelper getApiHelper(List<String> apiFilePaths, String apiFile) {
    lastApiFileUsed = apiFile;
    IAPIHelper apiHelper;
    String key = apiFilePaths.toString() + apiFile;
    if (apiHelpers.containsKey(key)) {
      apiHelper = apiHelpers.get(key);
    } else {
      apiHelper = apif.getAPIHelper(apiFilePaths, apiFile, proxyUrl, proxyPort, ignoreSSL);
      apiHelpers.put(key, apiHelper);
    }
    return apiHelper;
  }

  /**
   * Add log messages to cucumber report.
   *
   * @param msg The message to be logged.
   */
  private void log2TestRunner(String msg) {
    testRunnerLogger.accept(msg);
  }
}
