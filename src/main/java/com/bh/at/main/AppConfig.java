/****************************************************************************************************************
 * BH Confidential                                                                                              *
 * Unpublished Copyright 2021.  Baker Hughes Company                                                            *
 *                                                                                                              *
 * NOTICE:  All information contained herein is, and remains the property of  Baker Hughes Company,  and/or its *
 * affiliates. The intellectual and technical concepts contained herein are proprietary to Baker Hughes Company *
 * and/or its affiliates and may be covered by  patents,  copyrights,  and/or trade secrets.   Dissemination of *
 * this information or reproduction of this material is  strictly forbidden unless prior  written permission is *
 * obtained from Baker Hughes Company.                                                                          *
 ***************************************************************************************************************/

/* ** ** ** ** ** * AUTOGENERATED - DO NOT MODIFY, ANY MODIFICATIONS WILL BE OVERWRITTEN!!!!! * ** ** ** ** ** */

package com.bh.at.main;

import com.bh.at.client.uiutil.ClientUiUtil;
import com.bh.at.client.util.ClientUtil;
import com.bh.at.iuiutil.IBasePage;
import com.bh.at.iuiutil.IBrowserPage;
import com.bh.at.utils.IAPMUtil;
import com.bh.icommonallutil.IJSONO;
import com.bh.jsonutil.CyJSONO;
import com.bh.jsonutil.CyJsonUtilFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.MessageFormat;
import java.time.Duration;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

import static com.bh.at.atutil.CyAtConst.RT_NUM_PARTS;
import static com.bh.at.tester.BaseTester.currentTenant;

/**
 * The AppConfig type.
 */
public final class AppConfig {
    private static final Logger LOG = LoggerFactory.getLogger(AppConfig.class);
    private static final String DATA_API_TENANTS ="" ;

    private static final String DATA_API_CLIENT_SECRET="";
    private static Instant lastTokenFetchTime = null;
    private static String AuguryBuildingNodevalue = "7c24908e-a131-4e0c-aeae-5c32d03f8ce5"; //TestBuilding1
    private static String AugurySiteNodevalue = "a2caae81-9726-4b2e-b4ad-d166e5f44470";  //TestSite1
    private static String AuguryRegionvalue = "bc5ae275-5acb-4092-b16c-f59fb06bba61"; // TestBentlyRegion
    private static String AugurySubAccountvalue = "6272176a3407b2e2cf87eef7"; //Sub Acc 1
    private static String enterpriseIdR = "4594b0f6-8318-4ed5-ad2e-ff9d95a84567";
    private static String enterpriseIdS = "4770cb44-6491-4389-829f-394e529fb4ce";
    private static String auguryBuildingId = "6294a03425e71cac7a2dc599";
    static final String appName = "ei";
    /**
     * the runtime options.
     */
    static final String[] runtimeOptions = new String[RT_NUM_PARTS];
    /**
     * the app name.
     */
    static boolean isNewTokenStoredForExpiredTokenUsage = false;
    static boolean isExpiredAccessTokenLoaded = false;

    public static boolean isTfsReportingEnabled = false;

    public static boolean isTfsUploadingEnabled = false;
    static String expiredAccesstoken = null;
    /**
     * the envParams File.
     */
    static String envParamsFile;
    /**
     * the cucumber tags.
     */
    static String suites;
    /**
     * the reports folder.
     */
    static String reportsFolder;
    public static final String EXPIRED_TOKEN_FILE_NAME = "EI.ExpiredToken.json";
    public static final int TOKEN_EXPIRY_TIME_IN_SECONDS = 301;
    public static final String IST = "GMT+05:30";
    public static final String ENV_PARAMS_BH_JSON = "./envParamsBH.json";
    /* The proxy port with default value of 80
     */
    public static int proxyPort = 80;
    /**
     * the proxy url
     */
    public static String proxyUrl;
    /**
     * Specifies if ssl errors are to be ignored
     */
    public static boolean ignoreSSL = false;
    /**
     * The paths where api files can be located
     */
    public static List<String> apiPaths = new ArrayList<>();
    /**
     * The page which captures the screenshot
     */
    public static IBasePage currentPage = null;
    public static String keyCloakToken = null;
    public static IBrowserPage browserHandler = null;

    private AppConfig() {
    }

    /**
     * Utility function to read from the environment parameters.
     *
     * @param <T> the type parameter.
     * @param key the key.
     * @param def the default value.
     * @return the requested parameter.
     */
    public static <T> T getEnvParam(String key, T def) {
        return getMTEnvParam(key, def);
    }

    /**
     * Utility function to read from the environment parameters.
     *
     * @param <T> the type parameter.
     * @param key the key.
     * @param def the default value.
     * @return the requested parameter.
     */
    private static <T> T getMTEnvParam(String key, T def) {

        switch (key) {

            case DATA_API_CLIENT_SECRET -> {
                return ClientUtil.getValueFromEnvParams(MessageFormat.format(DATA_API_TENANTS + DATA_API_CLIENT_SECRET.split("/")[1], currentTenant), def);
            }
            default -> {
                return ClientUtil.getValueFromEnvParams(key, def);
            }
        }

    }




    public static void setKeyCloakToken(String keyCloakToken) {
        lastTokenFetchTime = Instant.now();
        AppConfig.keyCloakToken = keyCloakToken;
        //Comment this code if expiry time of token is more than general values
        if (!isNewTokenStoredForExpiredTokenUsage) {
            ZonedDateTime now = ZonedDateTime.now(ZoneId.of(IST));
            IJSONO expiredTokenFileObj = loadExpiredTokenObjectFromJsonFile();
            ZonedDateTime tokenGeneratedTime = ZonedDateTime.parse(expiredTokenFileObj.get("DateTimeOfExpiredTokenGeneration"));
            long secondsDifference = getSecondsDifference(tokenGeneratedTime, now);
            if (secondsDifference > TOKEN_EXPIRY_TIME_IN_SECONDS && secondsDifference < 43200) {
                isNewTokenStoredForExpiredTokenUsage = true;
                return;
            }
            IJSONO obj = new CyJSONO();
            obj.put("DateTimeOfExpiredTokenGeneration", now.toString());
            obj.put("expired_token", keyCloakToken.split(" ")[1]);
            try (FileWriter fw = new FileWriter(IAPMUtil.getFileForName(EXPIRED_TOKEN_FILE_NAME))) {
                fw.write(obj.toString());
                isNewTokenStoredForExpiredTokenUsage = true;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    //Augury Node
    public static String getAuguryBuildingNodeId() {
        return AuguryBuildingNodevalue;
    }

    public static void setAuguryBuildingNodeId(String auguryBuildingNodeId) {
        AppConfig.AuguryBuildingNodevalue = auguryBuildingNodeId;
    }

    public static String getAugurySiteNodevalue() {
        return AugurySiteNodevalue;
    }

    public static void setAugurySiteNodevalue(String augurySiteNodevalue) {
        AugurySiteNodevalue = augurySiteNodevalue;
    }

    public static String getAuguryRegionvalue() {
        return AuguryRegionvalue;
    }

    public static void setAuguryRegionvalue(String auguryRegionvalue) {
        AuguryRegionvalue = auguryRegionvalue;
    }

    public static String getAugurySubAccountvalue() {
        return AugurySubAccountvalue;
    }

    public static void setAugurySubAccountvalue(String augurySubAccountvalue) {
        AppConfig.AugurySubAccountvalue = augurySubAccountvalue;
    }

    public static String getAuguryRegressionEnterpriseId() {
        return enterpriseIdR;
    }

    public static String getAugurySmokeEnterpriseId() {
        return enterpriseIdS;
    }

    public static String getAuguryBuildingId() {
        return auguryBuildingId;
    }

    /**
     * Loads the environment data.
     */
    public static void setEnv() {
        if (new File(envParamsFile).exists()) {
            ClientUiUtil.setEnvironment(ClientUtil.loadEnv(envParamsFile));
            ClientUtil.setRuntimeParameters(runtimeOptions);
            loadEnvParams();
        } else {
            AppErrorExit(new Exception("Cannot locate the file " + envParamsFile));
        }
    }

    /**
     * Get Invalid token for token testing
     */


    /**
     * Get Expired Key Cloak Token
     */
    public static String getExpiredKeyCloakToken() {
        if (isExpiredAccessTokenLoaded) {
            return "bearer " + expiredAccesstoken;
        }
        IJSONO object = loadExpiredTokenObjectFromJsonFile();
        ZonedDateTime tokenGenerated = ZonedDateTime.parse(object.get("DateTimeOfExpiredTokenGeneration").toString());
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of(IST));
        long secondsDifference = getSecondsDifference(tokenGenerated, now);
        if (secondsDifference - TOKEN_EXPIRY_TIME_IN_SECONDS < 0) {
            LOG.debug("Waiting for token to expire");
            try {
                Thread.sleep((TOKEN_EXPIRY_TIME_IN_SECONDS - secondsDifference) * 1050);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
        expiredAccesstoken = object.get("expired_token");
        isExpiredAccessTokenLoaded = true;
        return "bearer " + expiredAccesstoken;
    }

    public static void printIpAddress() {
        InetAddress ip = null;
        try {
            ip = InetAddress.getLocalHost();
            System.out.println("#########################################");
            System.out.println("IP of system is := " + ip.getHostAddress());
            LOG.info("IP of system is := " + ip.getHostAddress());
            System.out.println("#########################################");
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

    }

    /**
     * Get cucumber run time param as string [].
     *
     * @return the parameter string [].
     */
    static String[] getCucumberRunTimeParam() {
        return ClientUtil.getCucumberRunTimeParam(appName, suites, reportsFolder);
    }

    /**
     * Exit the app after printing the cause
     *
     * @param ex the cause of exit
     */
    static void AppErrorExit(Exception ex) {
        LOG.error("***** Exiting encountered an error *****");
        ex.printStackTrace();
        System.exit(1);
    }

    private static IJSONO loadExpiredTokenObjectFromJsonFile() {
        return CyJsonUtilFactory.juf.getJSONOFromFile(IAPMUtil.getFileForName(EXPIRED_TOKEN_FILE_NAME));
    }

    private static long getSecondsDifference(ZonedDateTime tokenGenerated, ZonedDateTime now) {
        return Duration.between(tokenGenerated, now).getSeconds();
    }

    /**
     * load the environment parameters that are required to be accessed globally
     */
    private static void loadEnvParams() {
        ClientUtil.loadApiParams();
        proxyUrl = ClientUtil.getProxyUrl();
        proxyPort = ClientUtil.getProxyPort();
        ignoreSSL = ClientUtil.getIgnoreSSL();
        apiPaths = ClientUtil.getApiPaths();
    }
}
